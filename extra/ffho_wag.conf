{
	-- A new node's name will be autogenerated from
	-- it's primary MAC address and this prefix.
	-- e.g. freifunk-0123456789ab
	hostname_prefix = 'freifunk-',

	-- name of this community
	site_name = 'Freifunk Hochstift - Warburg',
	-- short name of this community
	site_code = 'ffho_wag',

	-- v4 and v6 prefixes in which nodes+clients might get an IP
	prefix4 = '10.132.64.0/19',
	prefix6 = '2a03:2260:2006:23::/64',

	-- extra ipv6 prefixes used in this mesh area
	-- additional_prefix6 = { },

	-- timezone
	timezone = 'CET-1CEST,M3.5.0,M10.5.0/3', -- Europe/Berlin

	-- network-internal ntp service
	ntp_servers = {'ntp.in.ffho.net'},

        -- OpenWRT Package Repository (IPv6 capable)
	opkg_repo = 'http://bo.mirror.garr.it/pub/1/openwrt/barrier_breaker/14.07/%S/packages/',

	-- regulatory domain of your wifi
	regdom = 'DE',

	-- wifi settings (2.4 GHz and 5 GHz)
	-- the most important thing to change is the SSID
	-- of the client network (hochstift.freifunk.net/yourcity) and
	-- both(!) mesh_?ssid ad-hoc mesh network ids.
	wifi24 = {
		ssid = 'hochstift.freifunk.net/warburg',
		channel = 1,
		htmode = 'HT20',
		mesh_ssid = 'ffho-mesh-wag',
		mesh_bssid = '6e:6b:c3:b4:6b:5c',
		mesh_mcast_rate = 12000,
	},
	wifi5 = {
		ssid = 'hochstift.freifunk.net/warburg',
		channel = 44,
		htmode = 'HT40+',
		mesh_ssid = 'ffho-mesh-wag',
		mesh_bssid = '6e:6b:c3:b4:6b:5c',
		mesh_mcast_rate = 12000,
	},

	-- IP address of each router
	-- At this IP a client can always connect to its
	-- currently connected node. Both v4 and v6 addr.
	-- must lie in the above prefix4 and prefix6.
	next_node = {
		ip4 = '10.132.64.1',
		ip6 = '2a03:2260:2006:23::1',

		-- mac address, must be unique in the client network
		-- (usually, you don't need to change this)
		mac = '16:41:95:40:f7:dc',
	},

	-- fastd (vpn) settings
	fastd_mesh_vpn = {
		-- cipher(s) to use
		methods = {'salsa2012+gmac'},

		-- the maximum transfer unit
		-- use 1426 for IPv4 gateways
		mtu = 1406,

		groups = {
			backbone = {
				-- specifies how many servers are contacted
				-- by a client simultanously
				limit = 1,
	
				-- list all available vpn servers
				peers = {
					gw01 = {
						-- public fastd key of the vpn server
						key = 'd33d9a6905ac166e12f7b004dbe2215c63fe930a8528ac124a62dba48ca845b9',
						-- remotes is an array of ways on how to reach the VPN server
						-- Use public addresses here, these addresses are used when the mesh might not be connected yet.
						-- format: '[|ipv4|ipv6] "hostname-or-ip-address" port 10000'
						remotes = {
							'ipv6 "gw01.wag.ffho.net" port 10000',
							'ipv4 "gw01.wag.ffho.net" port 10000',
							-- 'ipv6 "ToDo" port 10000',
							-- 'ipv4 "ToDo" port 10000',
						},
					},
					gw02 = {
						key = 'cf38aebe045c5c19c4018daf473071b298a607b095b4283e2cbf2669cc829e49',
						remotes = {
							'ipv6 "gw02.wag.ffho.net" port 10000',
							'ipv4 "gw02.wag.ffho.net" port 10000',
							-- 'ipv6 "ToDo" port 10000',
							-- 'ipv4 "ToDo" port 10000',
						},
					},
				},
			},
		},
	},

	-- configure the autoupdater
	autoupdater = {
		enabled = 1,

		-- default branch for a firmware
		-- In config-mode, the user can select a different branch from below
		branch = 'stable',

		-- available branches for the autoupdater
		branches = {
			stable = {
				-- visible name of this branch (why not use the internal identifier here, too)
				name = 'stable',

				-- where to get the manifest file (without the trailing /manifest)
				-- It's wise to use an internal address here,
				-- but specifying a publicly available update site does not hurt.
				mirrors = {'http://[fdca:ffee:ff12:a254::80]/wag/stable', 'http://firmware.wag.ffho.net/stable'},

				-- Number of valid manifest signatures necessary to accept the manifest as "good".
				good_signatures = 3,

				-- list of public keys which are considered "good" for manifest signatures
				pubkeys = {
					'16b0e942929d6592d4a01b66b334427ba4db03b388a876432958d9010bd8d8b5', -- HeJ
					'b0197042824a752c2dba717a4b2ded88852111bbe12e6b5f57fdfa3abb9312c0', -- thardes2
					'ba2e6ff4de41ade9959702195d4c26c764e7aab85c627363681c29dbc4a8a2c5', -- oscar-
					'fb9d6beba63dcb6175d0248c1e743b5fe4359474eb264d27f389d7a962e24477', -- northalpha
					'f70f9ddeb307fff8fca31a76f4fbd0ac676dab8ad143625f0a4160d434d72876', -- Barbarossa
				},
			},
			testing = {
				name = 'testing',
				mirrors = {'http://[fdca:ffee:ff12:a254::80]/wag/testing','http://firmware.wag.ffho.net/testing'},
				good_signatures = 2,
				pubkeys = {
					'16b0e942929d6592d4a01b66b334427ba4db03b388a876432958d9010bd8d8b5', -- HeJ
					'b0197042824a752c2dba717a4b2ded88852111bbe12e6b5f57fdfa3abb9312c0', -- thardes2
					'ba2e6ff4de41ade9959702195d4c26c764e7aab85c627363681c29dbc4a8a2c5', -- oscar-
					'fb9d6beba63dcb6175d0248c1e743b5fe4359474eb264d27f389d7a962e24477', -- northalpha
					'f70f9ddeb307fff8fca31a76f4fbd0ac676dab8ad143625f0a4160d434d72876', -- Barbarossa
				},
			},
			experimental = {
				name = 'experimental',
				mirrors = {'http://[fdca:ffee:ff12:a254::80]/wag/experimental','http://firmware.wag.ffho.net/experimental'},
				good_signatures = 1,
				pubkeys = {
					'16b0e942929d6592d4a01b66b334427ba4db03b388a876432958d9010bd8d8b5', -- HeJ
					'b0197042824a752c2dba717a4b2ded88852111bbe12e6b5f57fdfa3abb9312c0', -- thardes2
					'ba2e6ff4de41ade9959702195d4c26c764e7aab85c627363681c29dbc4a8a2c5', -- oscar-
					'fb9d6beba63dcb6175d0248c1e743b5fe4359474eb264d27f389d7a962e24477', -- northalpha
					'f70f9ddeb307fff8fca31a76f4fbd0ac676dab8ad143625f0a4160d434d72876', -- Barbarossa
				},
			},
		},
	},

	-- default traffic shaping (bandwidth limit) settings
	simple_tc = {
		mesh_vpn = {
			ifname = 'mesh-vpn',
			enabled = false,
			limit_egress = 200,
			limit_ingress = 3000,
		},
	},

	-- configure ffpb-debug
	debugserver = {
		host = { 'debugreport.ffho.net', 'fdca:ffee:ff12:a254::deb9' },
		port = 1337,
		liveport = 1338,
	},

	-- enable BATMAN on WAN interface by default (requires gluon-batman-on-wan package)
	batman_on_wan = 0,

}
